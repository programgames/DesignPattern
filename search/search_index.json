{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Design Patterns Un design pattern est une solution \u00e0 un probl\u00e8me de conception r\u00e9current. En d'autres termes les design patterns sont des fa\u00e7ons d'organiser son code , des mod\u00e8les \u00e0 suivre dans son code selon certaines situations. Ce sont des \"moules\" \u00e0 adapter dans son code. Ils sont aussi utilisables dans la plupart les languages de programmation. Les gros avantages des design datterns sont : Ils respectent les principes SOLID. Ils sont facilement testables. Ils sont facilement r\u00e9utilisables Ils sont facilement maintenables. Classification : Il y a plusieurs niveaux de complexit\u00e9, et de types de design patterns. Ici, 3 types de design patterns sont pr\u00e9sent\u00e9 : Design Patterns de cr\u00e9ation : Ils permettent une cr\u00e9ation d'objets flexibles et r\u00e9utilisables dans le reste du code. Design Patterns de Structure : Ils permettent d'assembler des objets et classes dans des grosses structures, tout en gardant la structure flexible. et efficace. Design Patterns de comportement : Ils mettent en place une bonne communication et d'assignation des responsabilit\u00e9s entre les objets.","title":"Home"},{"location":"#design-patterns","text":"Un design pattern est une solution \u00e0 un probl\u00e8me de conception r\u00e9current. En d'autres termes les design patterns sont des fa\u00e7ons d'organiser son code , des mod\u00e8les \u00e0 suivre dans son code selon certaines situations. Ce sont des \"moules\" \u00e0 adapter dans son code. Ils sont aussi utilisables dans la plupart les languages de programmation. Les gros avantages des design datterns sont : Ils respectent les principes SOLID. Ils sont facilement testables. Ils sont facilement r\u00e9utilisables Ils sont facilement maintenables. Classification : Il y a plusieurs niveaux de complexit\u00e9, et de types de design patterns. Ici, 3 types de design patterns sont pr\u00e9sent\u00e9 : Design Patterns de cr\u00e9ation : Ils permettent une cr\u00e9ation d'objets flexibles et r\u00e9utilisables dans le reste du code. Design Patterns de Structure : Ils permettent d'assembler des objets et classes dans des grosses structures, tout en gardant la structure flexible. et efficace. Design Patterns de comportement : Ils mettent en place une bonne communication et d'assignation des responsabilit\u00e9s entre les objets.","title":"Design Patterns"},{"location":"about/","text":"","title":"About"},{"location":"abstract-factory/","text":"Pr\u00e9sentation Le pattern abstract factory est un pattern de cr\u00e9ation. Il permet de mettre en place une interface permettant de cr\u00e9er des familles d'objets dans une 'super-classe'. Mais permet au sous-classes de changer la famille d'objets cr\u00e9\u00e9e, ces sous-classes sont appell\u00e9 les 'Creators' tandis que la super classe, la factory. Utilit\u00e9 Cr\u00e9ation de famille d'objets dans une classe parente. Example on veut cr\u00e9\u00e9er une fen\u00eatre d'application qui change selon si on est sur windows ou sur mac. On vas avoir une interface 'GuiFactory' implement\u00e9 par la WinGuifactory ou la MacguiFactory qui elles vont cr\u00e9er des boutons, checkbox. Les boutons de Mac Ou windows reste des Button ( interface ) Il permet de d\u00e9l\u00e9guer et de pouvoir ajouter des fonctionnement ind\u00e9finis de comportement par famille. Cela permet de r\u00e9duire drastiquement le lien entre le code client et la classe concrete. Il permet d'ajouter des familles d'objets sans casser le code client. C'est une \u00e9volution du pattern factory pour obtenir plus de souplesse quand \u00e0 la cr\u00e9ation d'objets.","title":"Abstract Factory"},{"location":"abstract-factory/#presentation","text":"Le pattern abstract factory est un pattern de cr\u00e9ation. Il permet de mettre en place une interface permettant de cr\u00e9er des familles d'objets dans une 'super-classe'. Mais permet au sous-classes de changer la famille d'objets cr\u00e9\u00e9e, ces sous-classes sont appell\u00e9 les 'Creators' tandis que la super classe, la factory.","title":"Pr\u00e9sentation"},{"location":"abstract-factory/#utilite","text":"Cr\u00e9ation de famille d'objets dans une classe parente. Example on veut cr\u00e9\u00e9er une fen\u00eatre d'application qui change selon si on est sur windows ou sur mac. On vas avoir une interface 'GuiFactory' implement\u00e9 par la WinGuifactory ou la MacguiFactory qui elles vont cr\u00e9er des boutons, checkbox. Les boutons de Mac Ou windows reste des Button ( interface ) Il permet de d\u00e9l\u00e9guer et de pouvoir ajouter des fonctionnement ind\u00e9finis de comportement par famille. Cela permet de r\u00e9duire drastiquement le lien entre le code client et la classe concrete. Il permet d'ajouter des familles d'objets sans casser le code client. C'est une \u00e9volution du pattern factory pour obtenir plus de souplesse quand \u00e0 la cr\u00e9ation d'objets.","title":"Utilit\u00e9"}]}